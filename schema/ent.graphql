directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""Create a new virtual machine."""
input CreateVirtualMachineInput {
  """The name of the Virtual Machine."""
  name: String!
  """The ID for the owner of this Virtual Machine."""
  ownerID: ID!
  """The ID for the location of this virtual machine."""
  locationID: ID!
  """The userdata for this virtual machine."""
  userdata: String
  """The memory for this virtual machine."""
  memory: Int
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""A valid JSON string."""
scalar JSON
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo @shareable {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query
"""The builtin Time type"""
scalar Time
"""Update an existing virtual machine."""
input UpdateVirtualMachineInput {
  """The name of the Virtual Machine."""
  name: String
  """The userdata for this virtual machine."""
  userdata: String
  clearUserdata: Boolean
  """The memory for this virtual machine."""
  memory: Int
}
type VirtualMachine implements Node @key(fields: "id") @prefixedID(prefix: "virtmac") {
  """The ID of the VirtualMachine."""
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  """The name of the Virtual Machine."""
  name: String!
  """The userdata for this virtual machine."""
  userdata: String
  """The memory for this virtual machine."""
  memory: Int!
}
"""A connection to a list of items."""
type VirtualMachineConnection {
  """A list of edges."""
  edges: [VirtualMachineEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type VirtualMachineEdge {
  """The item at the end of the edge."""
  node: VirtualMachine
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for VirtualMachine connections"""
input VirtualMachineOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order VirtualMachines."""
  field: VirtualMachineOrderField!
}
"""Properties by which VirtualMachine connections can be ordered."""
enum VirtualMachineOrderField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
  OWNER
  memory
}
"""
VirtualMachineWhereInput is used for filtering VirtualMachine objects.
Input was generated by ent.
"""
input VirtualMachineWhereInput {
  not: VirtualMachineWhereInput
  and: [VirtualMachineWhereInput!]
  or: [VirtualMachineWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """memory field predicates"""
  memory: Int
  memoryNEQ: Int
  memoryIn: [Int!]
  memoryNotIn: [Int!]
  memoryGT: Int
  memoryGTE: Int
  memoryLT: Int
  memoryLTE: Int
}
