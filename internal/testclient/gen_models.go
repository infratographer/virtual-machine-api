// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package testclient

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"go.infratographer.com/x/gidx"
)

// An object with an ID.
// Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
type Node interface {
	IsNode()
	// The id of the object.
	GetID() gidx.PrefixedID
}

type Entity interface {
	IsEntity()
}

// Create a new virtual machine.
type CreateVirtualMachineInput struct {
	// The name of the Virtual Machine.
	Name string `json:"name"`
	// The ID for the owner of this Virtual Machine.
	OwnerID gidx.PrefixedID `json:"ownerID"`
	// The ID for the location of this virtual machine.
	LocationID gidx.PrefixedID `json:"locationID"`
	// The userdata for this virtual machine.
	Userdata *string `json:"userdata,omitempty"`
	// The number of cores for the virtual machine.
	Cores *int64 `json:"cores,omitempty"`
	// The number of sockets for the virtual machine.
	Sockets *int64 `json:"sockets,omitempty"`
}

type Location struct {
	ID              gidx.PrefixedID          `json:"id"`
	VirtualMachines VirtualMachineConnection `json:"virtualMachines"`
}

func (Location) IsEntity() {}

// Information about pagination in a connection.
// https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
type PageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
}

type ResourceOwner struct {
	ID             gidx.PrefixedID          `json:"id"`
	VirtualMachine VirtualMachineConnection `json:"virtualMachine"`
}

func (ResourceOwner) IsEntity() {}

// Update an existing virtual machine.
type UpdateVirtualMachineInput struct {
	// The name of the Virtual Machine.
	Name *string `json:"name,omitempty"`
	// The userdata for this virtual machine.
	Userdata      *string `json:"userdata,omitempty"`
	ClearUserdata *bool   `json:"clearUserdata,omitempty"`
	// The number of cores for the virtual machine.
	Cores *int64 `json:"cores,omitempty"`
	// The number of sockets for the virtual machine.
	Sockets *int64 `json:"sockets,omitempty"`
}

type VirtualMachine struct {
	// The ID of the VirtualMachine.
	ID        gidx.PrefixedID `json:"id"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	// The name of the Virtual Machine.
	Name string `json:"name"`
	// The userdata for this virtual machine.
	Userdata *string `json:"userdata,omitempty"`
	// The number of cores for the virtual machine.
	Cores int64 `json:"cores"`
	// The number of sockets for the virtual machine.
	Sockets int64 `json:"sockets"`
	// The location of the load balancer.
	Location Location `json:"location"`
	// The owner of the VirtualMachine
	Owner ResourceOwner `json:"owner"`
}

func (VirtualMachine) IsNode() {}

// The id of the object.
func (this VirtualMachine) GetID() gidx.PrefixedID { return this.ID }

func (VirtualMachine) IsEntity() {}

// A connection to a list of items.
type VirtualMachineConnection struct {
	// A list of edges.
	Edges []*VirtualMachineEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int64 `json:"totalCount"`
}

// An edge in a connection.
type VirtualMachineEdge struct {
	// The item at the end of the edge.
	Node *VirtualMachine `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Ordering options for VirtualMachine connections
type VirtualMachineOrder struct {
	// The ordering direction.
	Direction OrderDirection `json:"direction"`
	// The field by which to order VirtualMachines.
	Field VirtualMachineOrderField `json:"field"`
}

// VirtualMachineWhereInput is used for filtering VirtualMachine objects.
// Input was generated by ent.
type VirtualMachineWhereInput struct {
	Not *VirtualMachineWhereInput   `json:"not,omitempty"`
	And []*VirtualMachineWhereInput `json:"and,omitempty"`
	Or  []*VirtualMachineWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNeq   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGt    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGte   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLt    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLte   *gidx.PrefixedID  `json:"idLTE,omitempty"`
	// created_at field predicates
	CreatedAt      *time.Time   `json:"createdAt,omitempty"`
	CreatedAtNeq   *time.Time   `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []*time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []*time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGt    *time.Time   `json:"createdAtGT,omitempty"`
	CreatedAtGte   *time.Time   `json:"createdAtGTE,omitempty"`
	CreatedAtLt    *time.Time   `json:"createdAtLT,omitempty"`
	CreatedAtLte   *time.Time   `json:"createdAtLTE,omitempty"`
	// updated_at field predicates
	UpdatedAt      *time.Time   `json:"updatedAt,omitempty"`
	UpdatedAtNeq   *time.Time   `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []*time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []*time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGt    *time.Time   `json:"updatedAtGT,omitempty"`
	UpdatedAtGte   *time.Time   `json:"updatedAtGTE,omitempty"`
	UpdatedAtLt    *time.Time   `json:"updatedAtLT,omitempty"`
	UpdatedAtLte   *time.Time   `json:"updatedAtLTE,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
}

type Service struct {
	Sdl *string `json:"sdl,omitempty"`
}

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Properties by which VirtualMachine connections can be ordered.
type VirtualMachineOrderField string

const (
	VirtualMachineOrderFieldID        VirtualMachineOrderField = "ID"
	VirtualMachineOrderFieldCreatedAt VirtualMachineOrderField = "CREATED_AT"
	VirtualMachineOrderFieldUpdatedAt VirtualMachineOrderField = "UPDATED_AT"
	VirtualMachineOrderFieldName      VirtualMachineOrderField = "NAME"
	VirtualMachineOrderFieldOwner     VirtualMachineOrderField = "OWNER"
)

var AllVirtualMachineOrderField = []VirtualMachineOrderField{
	VirtualMachineOrderFieldID,
	VirtualMachineOrderFieldCreatedAt,
	VirtualMachineOrderFieldUpdatedAt,
	VirtualMachineOrderFieldName,
	VirtualMachineOrderFieldOwner,
}

func (e VirtualMachineOrderField) IsValid() bool {
	switch e {
	case VirtualMachineOrderFieldID, VirtualMachineOrderFieldCreatedAt, VirtualMachineOrderFieldUpdatedAt, VirtualMachineOrderFieldName, VirtualMachineOrderFieldOwner:
		return true
	}
	return false
}

func (e VirtualMachineOrderField) String() string {
	return string(e)
}

func (e *VirtualMachineOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VirtualMachineOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VirtualMachineOrderField", str)
	}
	return nil
}

func (e VirtualMachineOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
