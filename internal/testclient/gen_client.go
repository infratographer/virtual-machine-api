// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package testclient

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/client"
	"go.infratographer.com/x/gidx"
)

type TestClient interface {
	GetVirtualMachineByID(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetVirtualMachineByID, error)
	GetVirtualMachineCPUConfigByID(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetVirtualMachineCPUConfigByID, error)
	GetVirtualMachineMemoryConfigByID(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetVirtualMachineMemoryConfigByID, error)
}

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) TestClient {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	VirtualMachine             VirtualMachine             "json:\"virtualMachine\" graphql:\"virtualMachine\""
	VirtualMachineCPUConfig    VirtualMachineCPUConfig    "json:\"virtualMachineCPUConfig\" graphql:\"virtualMachineCPUConfig\""
	VirtualMachineMemoryConfig VirtualMachineMemoryConfig "json:\"virtualMachineMemoryConfig\" graphql:\"virtualMachineMemoryConfig\""
	Entities                   []Entity                   "json:\"_entities\" graphql:\"_entities\""
	Service                    Service                    "json:\"_service\" graphql:\"_service\""
}
type GetVirtualMachineByID struct {
	VirtualMachine struct {
		ID    gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Name  string          "json:\"name\" graphql:\"name\""
		Owner struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"owner\" graphql:\"owner\""
		Location struct {
			ID gidx.PrefixedID "json:\"id\" graphql:\"id\""
		} "json:\"location\" graphql:\"location\""
		VMCPUConfigID    gidx.PrefixedID "json:\"vmCPUConfigID\" graphql:\"vmCPUConfigID\""
		VMMemoryConfigID gidx.PrefixedID "json:\"vmMemoryConfigID\" graphql:\"vmMemoryConfigID\""
	} "json:\"virtualMachine\" graphql:\"virtualMachine\""
}
type GetVirtualMachineCPUConfigByID struct {
	VirtualMachineCPUConfig struct {
		ID      gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Cores   int64           "json:\"cores\" graphql:\"cores\""
		Sockets int64           "json:\"sockets\" graphql:\"sockets\""
	} "json:\"virtualMachineCPUConfig\" graphql:\"virtualMachineCPUConfig\""
}
type GetVirtualMachineMemoryConfigByID struct {
	VirtualMachineMemoryConfig struct {
		ID   gidx.PrefixedID "json:\"id\" graphql:\"id\""
		Size int64           "json:\"size\" graphql:\"size\""
	} "json:\"virtualMachineMemoryConfig\" graphql:\"virtualMachineMemoryConfig\""
}

const GetVirtualMachineByIDDocument = `query GetVirtualMachineByID ($id: ID!) {
	virtualMachine(id: $id) {
		id
		name
		owner {
			id
		}
		location {
			id
		}
		vmCPUConfigID
		vmMemoryConfigID
	}
}
`

func (c *Client) GetVirtualMachineByID(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetVirtualMachineByID, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetVirtualMachineByID
	if err := c.Client.Post(ctx, "GetVirtualMachineByID", GetVirtualMachineByIDDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetVirtualMachineCPUConfigByIDDocument = `query GetVirtualMachineCPUConfigByID ($id: ID!) {
	virtualMachineCPUConfig(id: $id) {
		id
		cores
		sockets
	}
}
`

func (c *Client) GetVirtualMachineCPUConfigByID(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetVirtualMachineCPUConfigByID, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetVirtualMachineCPUConfigByID
	if err := c.Client.Post(ctx, "GetVirtualMachineCPUConfigByID", GetVirtualMachineCPUConfigByIDDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetVirtualMachineMemoryConfigByIDDocument = `query GetVirtualMachineMemoryConfigByID ($id: ID!) {
	virtualMachineMemoryConfig(id: $id) {
		id
		size
	}
}
`

func (c *Client) GetVirtualMachineMemoryConfigByID(ctx context.Context, id gidx.PrefixedID, httpRequestOptions ...client.HTTPRequestOption) (*GetVirtualMachineMemoryConfigByID, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res GetVirtualMachineMemoryConfigByID
	if err := c.Client.Post(ctx, "GetVirtualMachineMemoryConfigByID", GetVirtualMachineMemoryConfigByIDDocument, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
