// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachine"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachinememoryconfig"
	"go.infratographer.com/x/gidx"
)

// VirtualMachineMemoryConfigCreate is the builder for creating a VirtualMachineMemoryConfig entity.
type VirtualMachineMemoryConfigCreate struct {
	config
	mutation *VirtualMachineMemoryConfigMutation
	hooks    []Hook
}

// SetSize sets the "size" field.
func (vmmcc *VirtualMachineMemoryConfigCreate) SetSize(i int) *VirtualMachineMemoryConfigCreate {
	vmmcc.mutation.SetSize(i)
	return vmmcc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (vmmcc *VirtualMachineMemoryConfigCreate) SetNillableSize(i *int) *VirtualMachineMemoryConfigCreate {
	if i != nil {
		vmmcc.SetSize(*i)
	}
	return vmmcc
}

// SetID sets the "id" field.
func (vmmcc *VirtualMachineMemoryConfigCreate) SetID(gi gidx.PrefixedID) *VirtualMachineMemoryConfigCreate {
	vmmcc.mutation.SetID(gi)
	return vmmcc
}

// SetVirtualMachineID sets the "virtual_machine" edge to the VirtualMachine entity by ID.
func (vmmcc *VirtualMachineMemoryConfigCreate) SetVirtualMachineID(id gidx.PrefixedID) *VirtualMachineMemoryConfigCreate {
	vmmcc.mutation.SetVirtualMachineID(id)
	return vmmcc
}

// SetNillableVirtualMachineID sets the "virtual_machine" edge to the VirtualMachine entity by ID if the given value is not nil.
func (vmmcc *VirtualMachineMemoryConfigCreate) SetNillableVirtualMachineID(id *gidx.PrefixedID) *VirtualMachineMemoryConfigCreate {
	if id != nil {
		vmmcc = vmmcc.SetVirtualMachineID(*id)
	}
	return vmmcc
}

// SetVirtualMachine sets the "virtual_machine" edge to the VirtualMachine entity.
func (vmmcc *VirtualMachineMemoryConfigCreate) SetVirtualMachine(v *VirtualMachine) *VirtualMachineMemoryConfigCreate {
	return vmmcc.SetVirtualMachineID(v.ID)
}

// Mutation returns the VirtualMachineMemoryConfigMutation object of the builder.
func (vmmcc *VirtualMachineMemoryConfigCreate) Mutation() *VirtualMachineMemoryConfigMutation {
	return vmmcc.mutation
}

// Save creates the VirtualMachineMemoryConfig in the database.
func (vmmcc *VirtualMachineMemoryConfigCreate) Save(ctx context.Context) (*VirtualMachineMemoryConfig, error) {
	vmmcc.defaults()
	return withHooks(ctx, vmmcc.sqlSave, vmmcc.mutation, vmmcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vmmcc *VirtualMachineMemoryConfigCreate) SaveX(ctx context.Context) *VirtualMachineMemoryConfig {
	v, err := vmmcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vmmcc *VirtualMachineMemoryConfigCreate) Exec(ctx context.Context) error {
	_, err := vmmcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmmcc *VirtualMachineMemoryConfigCreate) ExecX(ctx context.Context) {
	if err := vmmcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vmmcc *VirtualMachineMemoryConfigCreate) defaults() {
	if _, ok := vmmcc.mutation.Size(); !ok {
		v := virtualmachinememoryconfig.DefaultSize
		vmmcc.mutation.SetSize(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vmmcc *VirtualMachineMemoryConfigCreate) check() error {
	if _, ok := vmmcc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`generated: missing required field "VirtualMachineMemoryConfig.size"`)}
	}
	if v, ok := vmmcc.mutation.Size(); ok {
		if err := virtualmachinememoryconfig.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`generated: validator failed for field "VirtualMachineMemoryConfig.size": %w`, err)}
		}
	}
	return nil
}

func (vmmcc *VirtualMachineMemoryConfigCreate) sqlSave(ctx context.Context) (*VirtualMachineMemoryConfig, error) {
	if err := vmmcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vmmcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vmmcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*gidx.PrefixedID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vmmcc.mutation.id = &_node.ID
	vmmcc.mutation.done = true
	return _node, nil
}

func (vmmcc *VirtualMachineMemoryConfigCreate) createSpec() (*VirtualMachineMemoryConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &VirtualMachineMemoryConfig{config: vmmcc.config}
		_spec = sqlgraph.NewCreateSpec(virtualmachinememoryconfig.Table, sqlgraph.NewFieldSpec(virtualmachinememoryconfig.FieldID, field.TypeString))
	)
	if id, ok := vmmcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vmmcc.mutation.Size(); ok {
		_spec.SetField(virtualmachinememoryconfig.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	if nodes := vmmcc.mutation.VirtualMachineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   virtualmachinememoryconfig.VirtualMachineTable,
			Columns: []string{virtualmachinememoryconfig.VirtualMachineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(virtualmachine.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VirtualMachineMemoryConfigCreateBulk is the builder for creating many VirtualMachineMemoryConfig entities in bulk.
type VirtualMachineMemoryConfigCreateBulk struct {
	config
	err      error
	builders []*VirtualMachineMemoryConfigCreate
}

// Save creates the VirtualMachineMemoryConfig entities in the database.
func (vmmccb *VirtualMachineMemoryConfigCreateBulk) Save(ctx context.Context) ([]*VirtualMachineMemoryConfig, error) {
	if vmmccb.err != nil {
		return nil, vmmccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vmmccb.builders))
	nodes := make([]*VirtualMachineMemoryConfig, len(vmmccb.builders))
	mutators := make([]Mutator, len(vmmccb.builders))
	for i := range vmmccb.builders {
		func(i int, root context.Context) {
			builder := vmmccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VirtualMachineMemoryConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vmmccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vmmccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vmmccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vmmccb *VirtualMachineMemoryConfigCreateBulk) SaveX(ctx context.Context) []*VirtualMachineMemoryConfig {
	v, err := vmmccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vmmccb *VirtualMachineMemoryConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := vmmccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmmccb *VirtualMachineMemoryConfigCreateBulk) ExecX(ctx context.Context) {
	if err := vmmccb.Exec(ctx); err != nil {
		panic(err)
	}
}
