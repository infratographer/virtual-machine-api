// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
)

func (vm *VirtualMachine) VirtualMachineCPUConfig(ctx context.Context) (*VirtualMachineCPUConfig, error) {
	result, err := vm.Edges.VirtualMachineCPUConfigOrErr()
	if IsNotLoaded(err) {
		result, err = vm.QueryVirtualMachineCPUConfig().Only(ctx)
	}
	return result, err
}

func (vm *VirtualMachine) VirtualMachineMemoryConfig(ctx context.Context) (*VirtualMachineMemoryConfig, error) {
	result, err := vm.Edges.VirtualMachineMemoryConfigOrErr()
	if IsNotLoaded(err) {
		result, err = vm.QueryVirtualMachineMemoryConfig().Only(ctx)
	}
	return result, err
}

func (vmcc *VirtualMachineCPUConfig) VirtualMachine(ctx context.Context) (*VirtualMachine, error) {
	result, err := vmcc.Edges.VirtualMachineOrErr()
	if IsNotLoaded(err) {
		result, err = vmcc.QueryVirtualMachine().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (vmmc *VirtualMachineMemoryConfig) VirtualMachine(ctx context.Context) (*VirtualMachine, error) {
	result, err := vmmc.Edges.VirtualMachineOrErr()
	if IsNotLoaded(err) {
		result, err = vmmc.QueryVirtualMachine().Only(ctx)
	}
	return result, MaskNotFound(err)
}
