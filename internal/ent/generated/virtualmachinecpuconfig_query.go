// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/predicate"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachine"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachinecpuconfig"
	"go.infratographer.com/x/gidx"
)

// VirtualMachineCPUConfigQuery is the builder for querying VirtualMachineCPUConfig entities.
type VirtualMachineCPUConfigQuery struct {
	config
	ctx                *QueryContext
	order              []virtualmachinecpuconfig.OrderOption
	inters             []Interceptor
	predicates         []predicate.VirtualMachineCPUConfig
	withVirtualMachine *VirtualMachineQuery
	modifiers          []func(*sql.Selector)
	loadTotal          []func(context.Context, []*VirtualMachineCPUConfig) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VirtualMachineCPUConfigQuery builder.
func (vmccq *VirtualMachineCPUConfigQuery) Where(ps ...predicate.VirtualMachineCPUConfig) *VirtualMachineCPUConfigQuery {
	vmccq.predicates = append(vmccq.predicates, ps...)
	return vmccq
}

// Limit the number of records to be returned by this query.
func (vmccq *VirtualMachineCPUConfigQuery) Limit(limit int) *VirtualMachineCPUConfigQuery {
	vmccq.ctx.Limit = &limit
	return vmccq
}

// Offset to start from.
func (vmccq *VirtualMachineCPUConfigQuery) Offset(offset int) *VirtualMachineCPUConfigQuery {
	vmccq.ctx.Offset = &offset
	return vmccq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vmccq *VirtualMachineCPUConfigQuery) Unique(unique bool) *VirtualMachineCPUConfigQuery {
	vmccq.ctx.Unique = &unique
	return vmccq
}

// Order specifies how the records should be ordered.
func (vmccq *VirtualMachineCPUConfigQuery) Order(o ...virtualmachinecpuconfig.OrderOption) *VirtualMachineCPUConfigQuery {
	vmccq.order = append(vmccq.order, o...)
	return vmccq
}

// QueryVirtualMachine chains the current query on the "virtual_machine" edge.
func (vmccq *VirtualMachineCPUConfigQuery) QueryVirtualMachine() *VirtualMachineQuery {
	query := (&VirtualMachineClient{config: vmccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vmccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vmccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(virtualmachinecpuconfig.Table, virtualmachinecpuconfig.FieldID, selector),
			sqlgraph.To(virtualmachine.Table, virtualmachine.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, virtualmachinecpuconfig.VirtualMachineTable, virtualmachinecpuconfig.VirtualMachineColumn),
		)
		fromU = sqlgraph.SetNeighbors(vmccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first VirtualMachineCPUConfig entity from the query.
// Returns a *NotFoundError when no VirtualMachineCPUConfig was found.
func (vmccq *VirtualMachineCPUConfigQuery) First(ctx context.Context) (*VirtualMachineCPUConfig, error) {
	nodes, err := vmccq.Limit(1).All(setContextOp(ctx, vmccq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{virtualmachinecpuconfig.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vmccq *VirtualMachineCPUConfigQuery) FirstX(ctx context.Context) *VirtualMachineCPUConfig {
	node, err := vmccq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first VirtualMachineCPUConfig ID from the query.
// Returns a *NotFoundError when no VirtualMachineCPUConfig ID was found.
func (vmccq *VirtualMachineCPUConfigQuery) FirstID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = vmccq.Limit(1).IDs(setContextOp(ctx, vmccq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{virtualmachinecpuconfig.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vmccq *VirtualMachineCPUConfigQuery) FirstIDX(ctx context.Context) gidx.PrefixedID {
	id, err := vmccq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single VirtualMachineCPUConfig entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one VirtualMachineCPUConfig entity is found.
// Returns a *NotFoundError when no VirtualMachineCPUConfig entities are found.
func (vmccq *VirtualMachineCPUConfigQuery) Only(ctx context.Context) (*VirtualMachineCPUConfig, error) {
	nodes, err := vmccq.Limit(2).All(setContextOp(ctx, vmccq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{virtualmachinecpuconfig.Label}
	default:
		return nil, &NotSingularError{virtualmachinecpuconfig.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vmccq *VirtualMachineCPUConfigQuery) OnlyX(ctx context.Context) *VirtualMachineCPUConfig {
	node, err := vmccq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only VirtualMachineCPUConfig ID in the query.
// Returns a *NotSingularError when more than one VirtualMachineCPUConfig ID is found.
// Returns a *NotFoundError when no entities are found.
func (vmccq *VirtualMachineCPUConfigQuery) OnlyID(ctx context.Context) (id gidx.PrefixedID, err error) {
	var ids []gidx.PrefixedID
	if ids, err = vmccq.Limit(2).IDs(setContextOp(ctx, vmccq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{virtualmachinecpuconfig.Label}
	default:
		err = &NotSingularError{virtualmachinecpuconfig.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vmccq *VirtualMachineCPUConfigQuery) OnlyIDX(ctx context.Context) gidx.PrefixedID {
	id, err := vmccq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VirtualMachineCPUConfigs.
func (vmccq *VirtualMachineCPUConfigQuery) All(ctx context.Context) ([]*VirtualMachineCPUConfig, error) {
	ctx = setContextOp(ctx, vmccq.ctx, "All")
	if err := vmccq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*VirtualMachineCPUConfig, *VirtualMachineCPUConfigQuery]()
	return withInterceptors[[]*VirtualMachineCPUConfig](ctx, vmccq, qr, vmccq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vmccq *VirtualMachineCPUConfigQuery) AllX(ctx context.Context) []*VirtualMachineCPUConfig {
	nodes, err := vmccq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of VirtualMachineCPUConfig IDs.
func (vmccq *VirtualMachineCPUConfigQuery) IDs(ctx context.Context) (ids []gidx.PrefixedID, err error) {
	if vmccq.ctx.Unique == nil && vmccq.path != nil {
		vmccq.Unique(true)
	}
	ctx = setContextOp(ctx, vmccq.ctx, "IDs")
	if err = vmccq.Select(virtualmachinecpuconfig.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vmccq *VirtualMachineCPUConfigQuery) IDsX(ctx context.Context) []gidx.PrefixedID {
	ids, err := vmccq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vmccq *VirtualMachineCPUConfigQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vmccq.ctx, "Count")
	if err := vmccq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vmccq, querierCount[*VirtualMachineCPUConfigQuery](), vmccq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vmccq *VirtualMachineCPUConfigQuery) CountX(ctx context.Context) int {
	count, err := vmccq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vmccq *VirtualMachineCPUConfigQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vmccq.ctx, "Exist")
	switch _, err := vmccq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vmccq *VirtualMachineCPUConfigQuery) ExistX(ctx context.Context) bool {
	exist, err := vmccq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VirtualMachineCPUConfigQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vmccq *VirtualMachineCPUConfigQuery) Clone() *VirtualMachineCPUConfigQuery {
	if vmccq == nil {
		return nil
	}
	return &VirtualMachineCPUConfigQuery{
		config:             vmccq.config,
		ctx:                vmccq.ctx.Clone(),
		order:              append([]virtualmachinecpuconfig.OrderOption{}, vmccq.order...),
		inters:             append([]Interceptor{}, vmccq.inters...),
		predicates:         append([]predicate.VirtualMachineCPUConfig{}, vmccq.predicates...),
		withVirtualMachine: vmccq.withVirtualMachine.Clone(),
		// clone intermediate query.
		sql:  vmccq.sql.Clone(),
		path: vmccq.path,
	}
}

// WithVirtualMachine tells the query-builder to eager-load the nodes that are connected to
// the "virtual_machine" edge. The optional arguments are used to configure the query builder of the edge.
func (vmccq *VirtualMachineCPUConfigQuery) WithVirtualMachine(opts ...func(*VirtualMachineQuery)) *VirtualMachineCPUConfigQuery {
	query := (&VirtualMachineClient{config: vmccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vmccq.withVirtualMachine = query
	return vmccq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		OwnerID gidx.PrefixedID `json:"owner_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.VirtualMachineCPUConfig.Query().
//		GroupBy(virtualmachinecpuconfig.FieldOwnerID).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (vmccq *VirtualMachineCPUConfigQuery) GroupBy(field string, fields ...string) *VirtualMachineCPUConfigGroupBy {
	vmccq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VirtualMachineCPUConfigGroupBy{build: vmccq}
	grbuild.flds = &vmccq.ctx.Fields
	grbuild.label = virtualmachinecpuconfig.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		OwnerID gidx.PrefixedID `json:"owner_id,omitempty"`
//	}
//
//	client.VirtualMachineCPUConfig.Query().
//		Select(virtualmachinecpuconfig.FieldOwnerID).
//		Scan(ctx, &v)
func (vmccq *VirtualMachineCPUConfigQuery) Select(fields ...string) *VirtualMachineCPUConfigSelect {
	vmccq.ctx.Fields = append(vmccq.ctx.Fields, fields...)
	sbuild := &VirtualMachineCPUConfigSelect{VirtualMachineCPUConfigQuery: vmccq}
	sbuild.label = virtualmachinecpuconfig.Label
	sbuild.flds, sbuild.scan = &vmccq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VirtualMachineCPUConfigSelect configured with the given aggregations.
func (vmccq *VirtualMachineCPUConfigQuery) Aggregate(fns ...AggregateFunc) *VirtualMachineCPUConfigSelect {
	return vmccq.Select().Aggregate(fns...)
}

func (vmccq *VirtualMachineCPUConfigQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vmccq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vmccq); err != nil {
				return err
			}
		}
	}
	for _, f := range vmccq.ctx.Fields {
		if !virtualmachinecpuconfig.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if vmccq.path != nil {
		prev, err := vmccq.path(ctx)
		if err != nil {
			return err
		}
		vmccq.sql = prev
	}
	return nil
}

func (vmccq *VirtualMachineCPUConfigQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*VirtualMachineCPUConfig, error) {
	var (
		nodes       = []*VirtualMachineCPUConfig{}
		_spec       = vmccq.querySpec()
		loadedTypes = [1]bool{
			vmccq.withVirtualMachine != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*VirtualMachineCPUConfig).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &VirtualMachineCPUConfig{config: vmccq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(vmccq.modifiers) > 0 {
		_spec.Modifiers = vmccq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vmccq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vmccq.withVirtualMachine; query != nil {
		if err := vmccq.loadVirtualMachine(ctx, query, nodes, nil,
			func(n *VirtualMachineCPUConfig, e *VirtualMachine) { n.Edges.VirtualMachine = e }); err != nil {
			return nil, err
		}
	}
	for i := range vmccq.loadTotal {
		if err := vmccq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vmccq *VirtualMachineCPUConfigQuery) loadVirtualMachine(ctx context.Context, query *VirtualMachineQuery, nodes []*VirtualMachineCPUConfig, init func(*VirtualMachineCPUConfig), assign func(*VirtualMachineCPUConfig, *VirtualMachine)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[gidx.PrefixedID]*VirtualMachineCPUConfig)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(virtualmachine.FieldVMCPUConfigID)
	}
	query.Where(predicate.VirtualMachine(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(virtualmachinecpuconfig.VirtualMachineColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.VMCPUConfigID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "vm_cpu_config_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (vmccq *VirtualMachineCPUConfigQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vmccq.querySpec()
	if len(vmccq.modifiers) > 0 {
		_spec.Modifiers = vmccq.modifiers
	}
	_spec.Node.Columns = vmccq.ctx.Fields
	if len(vmccq.ctx.Fields) > 0 {
		_spec.Unique = vmccq.ctx.Unique != nil && *vmccq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vmccq.driver, _spec)
}

func (vmccq *VirtualMachineCPUConfigQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(virtualmachinecpuconfig.Table, virtualmachinecpuconfig.Columns, sqlgraph.NewFieldSpec(virtualmachinecpuconfig.FieldID, field.TypeString))
	_spec.From = vmccq.sql
	if unique := vmccq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vmccq.path != nil {
		_spec.Unique = true
	}
	if fields := vmccq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, virtualmachinecpuconfig.FieldID)
		for i := range fields {
			if fields[i] != virtualmachinecpuconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vmccq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vmccq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vmccq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vmccq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vmccq *VirtualMachineCPUConfigQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vmccq.driver.Dialect())
	t1 := builder.Table(virtualmachinecpuconfig.Table)
	columns := vmccq.ctx.Fields
	if len(columns) == 0 {
		columns = virtualmachinecpuconfig.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vmccq.sql != nil {
		selector = vmccq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vmccq.ctx.Unique != nil && *vmccq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vmccq.predicates {
		p(selector)
	}
	for _, p := range vmccq.order {
		p(selector)
	}
	if offset := vmccq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vmccq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VirtualMachineCPUConfigGroupBy is the group-by builder for VirtualMachineCPUConfig entities.
type VirtualMachineCPUConfigGroupBy struct {
	selector
	build *VirtualMachineCPUConfigQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vmccgb *VirtualMachineCPUConfigGroupBy) Aggregate(fns ...AggregateFunc) *VirtualMachineCPUConfigGroupBy {
	vmccgb.fns = append(vmccgb.fns, fns...)
	return vmccgb
}

// Scan applies the selector query and scans the result into the given value.
func (vmccgb *VirtualMachineCPUConfigGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vmccgb.build.ctx, "GroupBy")
	if err := vmccgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VirtualMachineCPUConfigQuery, *VirtualMachineCPUConfigGroupBy](ctx, vmccgb.build, vmccgb, vmccgb.build.inters, v)
}

func (vmccgb *VirtualMachineCPUConfigGroupBy) sqlScan(ctx context.Context, root *VirtualMachineCPUConfigQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vmccgb.fns))
	for _, fn := range vmccgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vmccgb.flds)+len(vmccgb.fns))
		for _, f := range *vmccgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vmccgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vmccgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VirtualMachineCPUConfigSelect is the builder for selecting fields of VirtualMachineCPUConfig entities.
type VirtualMachineCPUConfigSelect struct {
	*VirtualMachineCPUConfigQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vmccs *VirtualMachineCPUConfigSelect) Aggregate(fns ...AggregateFunc) *VirtualMachineCPUConfigSelect {
	vmccs.fns = append(vmccs.fns, fns...)
	return vmccs
}

// Scan applies the selector query and scans the result into the given value.
func (vmccs *VirtualMachineCPUConfigSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vmccs.ctx, "Select")
	if err := vmccs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VirtualMachineCPUConfigQuery, *VirtualMachineCPUConfigSelect](ctx, vmccs.VirtualMachineCPUConfigQuery, vmccs, vmccs.inters, v)
}

func (vmccs *VirtualMachineCPUConfigSelect) sqlScan(ctx context.Context, root *VirtualMachineCPUConfigQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vmccs.fns))
	for _, fn := range vmccs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vmccs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vmccs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
