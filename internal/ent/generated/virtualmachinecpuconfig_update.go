// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/predicate"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachinecpuconfig"
)

// VirtualMachineCPUConfigUpdate is the builder for updating VirtualMachineCPUConfig entities.
type VirtualMachineCPUConfigUpdate struct {
	config
	hooks    []Hook
	mutation *VirtualMachineCPUConfigMutation
}

// Where appends a list predicates to the VirtualMachineCPUConfigUpdate builder.
func (vmccu *VirtualMachineCPUConfigUpdate) Where(ps ...predicate.VirtualMachineCPUConfig) *VirtualMachineCPUConfigUpdate {
	vmccu.mutation.Where(ps...)
	return vmccu
}

// SetCores sets the "cores" field.
func (vmccu *VirtualMachineCPUConfigUpdate) SetCores(i int64) *VirtualMachineCPUConfigUpdate {
	vmccu.mutation.ResetCores()
	vmccu.mutation.SetCores(i)
	return vmccu
}

// AddCores adds i to the "cores" field.
func (vmccu *VirtualMachineCPUConfigUpdate) AddCores(i int64) *VirtualMachineCPUConfigUpdate {
	vmccu.mutation.AddCores(i)
	return vmccu
}

// SetSockets sets the "sockets" field.
func (vmccu *VirtualMachineCPUConfigUpdate) SetSockets(i int64) *VirtualMachineCPUConfigUpdate {
	vmccu.mutation.ResetSockets()
	vmccu.mutation.SetSockets(i)
	return vmccu
}

// AddSockets adds i to the "sockets" field.
func (vmccu *VirtualMachineCPUConfigUpdate) AddSockets(i int64) *VirtualMachineCPUConfigUpdate {
	vmccu.mutation.AddSockets(i)
	return vmccu
}

// Mutation returns the VirtualMachineCPUConfigMutation object of the builder.
func (vmccu *VirtualMachineCPUConfigUpdate) Mutation() *VirtualMachineCPUConfigMutation {
	return vmccu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vmccu *VirtualMachineCPUConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vmccu.sqlSave, vmccu.mutation, vmccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmccu *VirtualMachineCPUConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := vmccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vmccu *VirtualMachineCPUConfigUpdate) Exec(ctx context.Context) error {
	_, err := vmccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmccu *VirtualMachineCPUConfigUpdate) ExecX(ctx context.Context) {
	if err := vmccu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vmccu *VirtualMachineCPUConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(virtualmachinecpuconfig.Table, virtualmachinecpuconfig.Columns, sqlgraph.NewFieldSpec(virtualmachinecpuconfig.FieldID, field.TypeString))
	if ps := vmccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmccu.mutation.Cores(); ok {
		_spec.SetField(virtualmachinecpuconfig.FieldCores, field.TypeInt64, value)
	}
	if value, ok := vmccu.mutation.AddedCores(); ok {
		_spec.AddField(virtualmachinecpuconfig.FieldCores, field.TypeInt64, value)
	}
	if value, ok := vmccu.mutation.Sockets(); ok {
		_spec.SetField(virtualmachinecpuconfig.FieldSockets, field.TypeInt64, value)
	}
	if value, ok := vmccu.mutation.AddedSockets(); ok {
		_spec.AddField(virtualmachinecpuconfig.FieldSockets, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vmccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{virtualmachinecpuconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vmccu.mutation.done = true
	return n, nil
}

// VirtualMachineCPUConfigUpdateOne is the builder for updating a single VirtualMachineCPUConfig entity.
type VirtualMachineCPUConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VirtualMachineCPUConfigMutation
}

// SetCores sets the "cores" field.
func (vmccuo *VirtualMachineCPUConfigUpdateOne) SetCores(i int64) *VirtualMachineCPUConfigUpdateOne {
	vmccuo.mutation.ResetCores()
	vmccuo.mutation.SetCores(i)
	return vmccuo
}

// AddCores adds i to the "cores" field.
func (vmccuo *VirtualMachineCPUConfigUpdateOne) AddCores(i int64) *VirtualMachineCPUConfigUpdateOne {
	vmccuo.mutation.AddCores(i)
	return vmccuo
}

// SetSockets sets the "sockets" field.
func (vmccuo *VirtualMachineCPUConfigUpdateOne) SetSockets(i int64) *VirtualMachineCPUConfigUpdateOne {
	vmccuo.mutation.ResetSockets()
	vmccuo.mutation.SetSockets(i)
	return vmccuo
}

// AddSockets adds i to the "sockets" field.
func (vmccuo *VirtualMachineCPUConfigUpdateOne) AddSockets(i int64) *VirtualMachineCPUConfigUpdateOne {
	vmccuo.mutation.AddSockets(i)
	return vmccuo
}

// Mutation returns the VirtualMachineCPUConfigMutation object of the builder.
func (vmccuo *VirtualMachineCPUConfigUpdateOne) Mutation() *VirtualMachineCPUConfigMutation {
	return vmccuo.mutation
}

// Where appends a list predicates to the VirtualMachineCPUConfigUpdate builder.
func (vmccuo *VirtualMachineCPUConfigUpdateOne) Where(ps ...predicate.VirtualMachineCPUConfig) *VirtualMachineCPUConfigUpdateOne {
	vmccuo.mutation.Where(ps...)
	return vmccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vmccuo *VirtualMachineCPUConfigUpdateOne) Select(field string, fields ...string) *VirtualMachineCPUConfigUpdateOne {
	vmccuo.fields = append([]string{field}, fields...)
	return vmccuo
}

// Save executes the query and returns the updated VirtualMachineCPUConfig entity.
func (vmccuo *VirtualMachineCPUConfigUpdateOne) Save(ctx context.Context) (*VirtualMachineCPUConfig, error) {
	return withHooks(ctx, vmccuo.sqlSave, vmccuo.mutation, vmccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmccuo *VirtualMachineCPUConfigUpdateOne) SaveX(ctx context.Context) *VirtualMachineCPUConfig {
	node, err := vmccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vmccuo *VirtualMachineCPUConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := vmccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmccuo *VirtualMachineCPUConfigUpdateOne) ExecX(ctx context.Context) {
	if err := vmccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vmccuo *VirtualMachineCPUConfigUpdateOne) sqlSave(ctx context.Context) (_node *VirtualMachineCPUConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(virtualmachinecpuconfig.Table, virtualmachinecpuconfig.Columns, sqlgraph.NewFieldSpec(virtualmachinecpuconfig.FieldID, field.TypeString))
	id, ok := vmccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "VirtualMachineCPUConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vmccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, virtualmachinecpuconfig.FieldID)
		for _, f := range fields {
			if !virtualmachinecpuconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != virtualmachinecpuconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vmccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmccuo.mutation.Cores(); ok {
		_spec.SetField(virtualmachinecpuconfig.FieldCores, field.TypeInt64, value)
	}
	if value, ok := vmccuo.mutation.AddedCores(); ok {
		_spec.AddField(virtualmachinecpuconfig.FieldCores, field.TypeInt64, value)
	}
	if value, ok := vmccuo.mutation.Sockets(); ok {
		_spec.SetField(virtualmachinecpuconfig.FieldSockets, field.TypeInt64, value)
	}
	if value, ok := vmccuo.mutation.AddedSockets(); ok {
		_spec.AddField(virtualmachinecpuconfig.FieldSockets, field.TypeInt64, value)
	}
	_node = &VirtualMachineCPUConfig{config: vmccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vmccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{virtualmachinecpuconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vmccuo.mutation.done = true
	return _node, nil
}
