// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"time"

	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachine"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachinecpuconfig"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachinememoryconfig"
	"go.infratographer.com/virtual-machine-api/internal/ent/schema"
	"go.infratographer.com/x/gidx"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	virtualmachineMixin := schema.VirtualMachine{}.Mixin()
	virtualmachineMixinFields0 := virtualmachineMixin[0].Fields()
	_ = virtualmachineMixinFields0
	virtualmachineFields := schema.VirtualMachine{}.Fields()
	_ = virtualmachineFields
	// virtualmachineDescCreatedAt is the schema descriptor for created_at field.
	virtualmachineDescCreatedAt := virtualmachineMixinFields0[0].Descriptor()
	// virtualmachine.DefaultCreatedAt holds the default value on creation for the created_at field.
	virtualmachine.DefaultCreatedAt = virtualmachineDescCreatedAt.Default.(func() time.Time)
	// virtualmachineDescUpdatedAt is the schema descriptor for updated_at field.
	virtualmachineDescUpdatedAt := virtualmachineMixinFields0[1].Descriptor()
	// virtualmachine.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	virtualmachine.DefaultUpdatedAt = virtualmachineDescUpdatedAt.Default.(func() time.Time)
	// virtualmachine.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	virtualmachine.UpdateDefaultUpdatedAt = virtualmachineDescUpdatedAt.UpdateDefault.(func() time.Time)
	// virtualmachineDescName is the schema descriptor for name field.
	virtualmachineDescName := virtualmachineFields[1].Descriptor()
	// virtualmachine.NameValidator is a validator for the "name" field. It is called by the builders before save.
	virtualmachine.NameValidator = virtualmachineDescName.Validators[0].(func(string) error)
	// virtualmachineDescLocationID is the schema descriptor for location_id field.
	virtualmachineDescLocationID := virtualmachineFields[3].Descriptor()
	// virtualmachine.LocationIDValidator is a validator for the "location_id" field. It is called by the builders before save.
	virtualmachine.LocationIDValidator = virtualmachineDescLocationID.Validators[0].(func(string) error)
	// virtualmachineDescID is the schema descriptor for id field.
	virtualmachineDescID := virtualmachineFields[0].Descriptor()
	// virtualmachine.DefaultID holds the default value on creation for the id field.
	virtualmachine.DefaultID = virtualmachineDescID.Default.(func() gidx.PrefixedID)
	virtualmachinecpuconfigFields := schema.VirtualMachineCPUConfig{}.Fields()
	_ = virtualmachinecpuconfigFields
	// virtualmachinecpuconfigDescCores is the schema descriptor for cores field.
	virtualmachinecpuconfigDescCores := virtualmachinecpuconfigFields[1].Descriptor()
	// virtualmachinecpuconfig.CoresValidator is a validator for the "cores" field. It is called by the builders before save.
	virtualmachinecpuconfig.CoresValidator = func() func(int64) error {
		validators := virtualmachinecpuconfigDescCores.Validators
		fns := [...]func(int64) error{
			validators[0].(func(int64) error),
			validators[1].(func(int64) error),
		}
		return func(cores int64) error {
			for _, fn := range fns {
				if err := fn(cores); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// virtualmachinecpuconfigDescSockets is the schema descriptor for sockets field.
	virtualmachinecpuconfigDescSockets := virtualmachinecpuconfigFields[2].Descriptor()
	// virtualmachinecpuconfig.SocketsValidator is a validator for the "sockets" field. It is called by the builders before save.
	virtualmachinecpuconfig.SocketsValidator = func() func(int64) error {
		validators := virtualmachinecpuconfigDescSockets.Validators
		fns := [...]func(int64) error{
			validators[0].(func(int64) error),
			validators[1].(func(int64) error),
		}
		return func(sockets int64) error {
			for _, fn := range fns {
				if err := fn(sockets); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	virtualmachinememoryconfigFields := schema.VirtualMachineMemoryConfig{}.Fields()
	_ = virtualmachinememoryconfigFields
	// virtualmachinememoryconfigDescSize is the schema descriptor for size field.
	virtualmachinememoryconfigDescSize := virtualmachinememoryconfigFields[1].Descriptor()
	// virtualmachinememoryconfig.DefaultSize holds the default value on creation for the size field.
	virtualmachinememoryconfig.DefaultSize = virtualmachinememoryconfigDescSize.Default.(int)
	// virtualmachinememoryconfig.SizeValidator is a validator for the "size" field. It is called by the builders before save.
	virtualmachinememoryconfig.SizeValidator = virtualmachinememoryconfigDescSize.Validators[0].(func(int) error)
}
