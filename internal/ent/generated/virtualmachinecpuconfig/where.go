// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package virtualmachinecpuconfig

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/predicate"
	"go.infratographer.com/x/gidx"
)

// ID filters vertices based on their ID field.
func ID(id gidx.PrefixedID) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id gidx.PrefixedID) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id gidx.PrefixedID) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...gidx.PrefixedID) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...gidx.PrefixedID) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id gidx.PrefixedID) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id gidx.PrefixedID) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id gidx.PrefixedID) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id gidx.PrefixedID) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldLTE(FieldID, id))
}

// Cores applies equality check predicate on the "cores" field. It's identical to CoresEQ.
func Cores(v int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldEQ(FieldCores, v))
}

// Sockets applies equality check predicate on the "sockets" field. It's identical to SocketsEQ.
func Sockets(v int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldEQ(FieldSockets, v))
}

// CoresEQ applies the EQ predicate on the "cores" field.
func CoresEQ(v int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldEQ(FieldCores, v))
}

// CoresNEQ applies the NEQ predicate on the "cores" field.
func CoresNEQ(v int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldNEQ(FieldCores, v))
}

// CoresIn applies the In predicate on the "cores" field.
func CoresIn(vs ...int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldIn(FieldCores, vs...))
}

// CoresNotIn applies the NotIn predicate on the "cores" field.
func CoresNotIn(vs ...int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldNotIn(FieldCores, vs...))
}

// CoresGT applies the GT predicate on the "cores" field.
func CoresGT(v int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldGT(FieldCores, v))
}

// CoresGTE applies the GTE predicate on the "cores" field.
func CoresGTE(v int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldGTE(FieldCores, v))
}

// CoresLT applies the LT predicate on the "cores" field.
func CoresLT(v int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldLT(FieldCores, v))
}

// CoresLTE applies the LTE predicate on the "cores" field.
func CoresLTE(v int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldLTE(FieldCores, v))
}

// SocketsEQ applies the EQ predicate on the "sockets" field.
func SocketsEQ(v int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldEQ(FieldSockets, v))
}

// SocketsNEQ applies the NEQ predicate on the "sockets" field.
func SocketsNEQ(v int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldNEQ(FieldSockets, v))
}

// SocketsIn applies the In predicate on the "sockets" field.
func SocketsIn(vs ...int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldIn(FieldSockets, vs...))
}

// SocketsNotIn applies the NotIn predicate on the "sockets" field.
func SocketsNotIn(vs ...int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldNotIn(FieldSockets, vs...))
}

// SocketsGT applies the GT predicate on the "sockets" field.
func SocketsGT(v int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldGT(FieldSockets, v))
}

// SocketsGTE applies the GTE predicate on the "sockets" field.
func SocketsGTE(v int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldGTE(FieldSockets, v))
}

// SocketsLT applies the LT predicate on the "sockets" field.
func SocketsLT(v int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldLT(FieldSockets, v))
}

// SocketsLTE applies the LTE predicate on the "sockets" field.
func SocketsLTE(v int64) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.FieldLTE(FieldSockets, v))
}

// HasVirtualMachine applies the HasEdge predicate on the "virtual_machine" edge.
func HasVirtualMachine() predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, VirtualMachineTable, VirtualMachineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVirtualMachineWith applies the HasEdge predicate on the "virtual_machine" edge with a given conditions (other predicates).
func HasVirtualMachineWith(preds ...predicate.VirtualMachine) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(func(s *sql.Selector) {
		step := newVirtualMachineStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VirtualMachineCPUConfig) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VirtualMachineCPUConfig) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VirtualMachineCPUConfig) predicate.VirtualMachineCPUConfig {
	return predicate.VirtualMachineCPUConfig(sql.NotPredicates(p))
}
