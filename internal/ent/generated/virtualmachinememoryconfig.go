// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachine"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachinememoryconfig"
	"go.infratographer.com/x/gidx"
)

// VirtualMachineMemoryConfig is the model entity for the VirtualMachineMemoryConfig schema.
type VirtualMachineMemoryConfig struct {
	config `json:"-"`
	// ID of the ent.
	// The ID for the virtual machine memory config.
	ID gidx.PrefixedID `json:"id,omitempty"`
	// The size of memory for this virtual machine.
	Size int `json:"size,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VirtualMachineMemoryConfigQuery when eager-loading is set.
	Edges        VirtualMachineMemoryConfigEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VirtualMachineMemoryConfigEdges holds the relations/edges for other nodes in the graph.
type VirtualMachineMemoryConfigEdges struct {
	// VirtualMachine holds the value of the virtual_machine edge.
	VirtualMachine *VirtualMachine `json:"virtual_machine,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// VirtualMachineOrErr returns the VirtualMachine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VirtualMachineMemoryConfigEdges) VirtualMachineOrErr() (*VirtualMachine, error) {
	if e.loadedTypes[0] {
		if e.VirtualMachine == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: virtualmachine.Label}
		}
		return e.VirtualMachine, nil
	}
	return nil, &NotLoadedError{edge: "virtual_machine"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VirtualMachineMemoryConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case virtualmachinememoryconfig.FieldID:
			values[i] = new(gidx.PrefixedID)
		case virtualmachinememoryconfig.FieldSize:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VirtualMachineMemoryConfig fields.
func (vmmc *VirtualMachineMemoryConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case virtualmachinememoryconfig.FieldID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				vmmc.ID = *value
			}
		case virtualmachinememoryconfig.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				vmmc.Size = int(value.Int64)
			}
		default:
			vmmc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VirtualMachineMemoryConfig.
// This includes values selected through modifiers, order, etc.
func (vmmc *VirtualMachineMemoryConfig) Value(name string) (ent.Value, error) {
	return vmmc.selectValues.Get(name)
}

// QueryVirtualMachine queries the "virtual_machine" edge of the VirtualMachineMemoryConfig entity.
func (vmmc *VirtualMachineMemoryConfig) QueryVirtualMachine() *VirtualMachineQuery {
	return NewVirtualMachineMemoryConfigClient(vmmc.config).QueryVirtualMachine(vmmc)
}

// Update returns a builder for updating this VirtualMachineMemoryConfig.
// Note that you need to call VirtualMachineMemoryConfig.Unwrap() before calling this method if this VirtualMachineMemoryConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (vmmc *VirtualMachineMemoryConfig) Update() *VirtualMachineMemoryConfigUpdateOne {
	return NewVirtualMachineMemoryConfigClient(vmmc.config).UpdateOne(vmmc)
}

// Unwrap unwraps the VirtualMachineMemoryConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vmmc *VirtualMachineMemoryConfig) Unwrap() *VirtualMachineMemoryConfig {
	_tx, ok := vmmc.config.driver.(*txDriver)
	if !ok {
		panic("generated: VirtualMachineMemoryConfig is not a transactional entity")
	}
	vmmc.config.driver = _tx.drv
	return vmmc
}

// String implements the fmt.Stringer.
func (vmmc *VirtualMachineMemoryConfig) String() string {
	var builder strings.Builder
	builder.WriteString("VirtualMachineMemoryConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vmmc.ID))
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", vmmc.Size))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (vmmc VirtualMachineMemoryConfig) IsEntity() {}

// VirtualMachineMemoryConfigs is a parsable slice of VirtualMachineMemoryConfig.
type VirtualMachineMemoryConfigs []*VirtualMachineMemoryConfig
