// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/predicate"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachine"
)

// VirtualMachineUpdate is the builder for updating VirtualMachine entities.
type VirtualMachineUpdate struct {
	config
	hooks    []Hook
	mutation *VirtualMachineMutation
}

// Where appends a list predicates to the VirtualMachineUpdate builder.
func (vmu *VirtualMachineUpdate) Where(ps ...predicate.VirtualMachine) *VirtualMachineUpdate {
	vmu.mutation.Where(ps...)
	return vmu
}

// SetName sets the "name" field.
func (vmu *VirtualMachineUpdate) SetName(s string) *VirtualMachineUpdate {
	vmu.mutation.SetName(s)
	return vmu
}

// SetUserdata sets the "userdata" field.
func (vmu *VirtualMachineUpdate) SetUserdata(s string) *VirtualMachineUpdate {
	vmu.mutation.SetUserdata(s)
	return vmu
}

// SetNillableUserdata sets the "userdata" field if the given value is not nil.
func (vmu *VirtualMachineUpdate) SetNillableUserdata(s *string) *VirtualMachineUpdate {
	if s != nil {
		vmu.SetUserdata(*s)
	}
	return vmu
}

// ClearUserdata clears the value of the "userdata" field.
func (vmu *VirtualMachineUpdate) ClearUserdata() *VirtualMachineUpdate {
	vmu.mutation.ClearUserdata()
	return vmu
}

// Mutation returns the VirtualMachineMutation object of the builder.
func (vmu *VirtualMachineUpdate) Mutation() *VirtualMachineMutation {
	return vmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vmu *VirtualMachineUpdate) Save(ctx context.Context) (int, error) {
	vmu.defaults()
	return withHooks(ctx, vmu.sqlSave, vmu.mutation, vmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmu *VirtualMachineUpdate) SaveX(ctx context.Context) int {
	affected, err := vmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vmu *VirtualMachineUpdate) Exec(ctx context.Context) error {
	_, err := vmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmu *VirtualMachineUpdate) ExecX(ctx context.Context) {
	if err := vmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vmu *VirtualMachineUpdate) defaults() {
	if _, ok := vmu.mutation.UpdatedAt(); !ok {
		v := virtualmachine.UpdateDefaultUpdatedAt()
		vmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vmu *VirtualMachineUpdate) check() error {
	if v, ok := vmu.mutation.Name(); ok {
		if err := virtualmachine.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "VirtualMachine.name": %w`, err)}
		}
	}
	if _, ok := vmu.mutation.VirtualMachineCPUConfigID(); vmu.mutation.VirtualMachineCPUConfigCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "VirtualMachine.virtual_machine_cpu_config"`)
	}
	if _, ok := vmu.mutation.VirtualMachineMemoryConfigID(); vmu.mutation.VirtualMachineMemoryConfigCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "VirtualMachine.virtual_machine_memory_config"`)
	}
	return nil
}

func (vmu *VirtualMachineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(virtualmachine.Table, virtualmachine.Columns, sqlgraph.NewFieldSpec(virtualmachine.FieldID, field.TypeString))
	if ps := vmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmu.mutation.UpdatedAt(); ok {
		_spec.SetField(virtualmachine.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vmu.mutation.Name(); ok {
		_spec.SetField(virtualmachine.FieldName, field.TypeString, value)
	}
	if value, ok := vmu.mutation.Userdata(); ok {
		_spec.SetField(virtualmachine.FieldUserdata, field.TypeString, value)
	}
	if vmu.mutation.UserdataCleared() {
		_spec.ClearField(virtualmachine.FieldUserdata, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{virtualmachine.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vmu.mutation.done = true
	return n, nil
}

// VirtualMachineUpdateOne is the builder for updating a single VirtualMachine entity.
type VirtualMachineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VirtualMachineMutation
}

// SetName sets the "name" field.
func (vmuo *VirtualMachineUpdateOne) SetName(s string) *VirtualMachineUpdateOne {
	vmuo.mutation.SetName(s)
	return vmuo
}

// SetUserdata sets the "userdata" field.
func (vmuo *VirtualMachineUpdateOne) SetUserdata(s string) *VirtualMachineUpdateOne {
	vmuo.mutation.SetUserdata(s)
	return vmuo
}

// SetNillableUserdata sets the "userdata" field if the given value is not nil.
func (vmuo *VirtualMachineUpdateOne) SetNillableUserdata(s *string) *VirtualMachineUpdateOne {
	if s != nil {
		vmuo.SetUserdata(*s)
	}
	return vmuo
}

// ClearUserdata clears the value of the "userdata" field.
func (vmuo *VirtualMachineUpdateOne) ClearUserdata() *VirtualMachineUpdateOne {
	vmuo.mutation.ClearUserdata()
	return vmuo
}

// Mutation returns the VirtualMachineMutation object of the builder.
func (vmuo *VirtualMachineUpdateOne) Mutation() *VirtualMachineMutation {
	return vmuo.mutation
}

// Where appends a list predicates to the VirtualMachineUpdate builder.
func (vmuo *VirtualMachineUpdateOne) Where(ps ...predicate.VirtualMachine) *VirtualMachineUpdateOne {
	vmuo.mutation.Where(ps...)
	return vmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vmuo *VirtualMachineUpdateOne) Select(field string, fields ...string) *VirtualMachineUpdateOne {
	vmuo.fields = append([]string{field}, fields...)
	return vmuo
}

// Save executes the query and returns the updated VirtualMachine entity.
func (vmuo *VirtualMachineUpdateOne) Save(ctx context.Context) (*VirtualMachine, error) {
	vmuo.defaults()
	return withHooks(ctx, vmuo.sqlSave, vmuo.mutation, vmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmuo *VirtualMachineUpdateOne) SaveX(ctx context.Context) *VirtualMachine {
	node, err := vmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vmuo *VirtualMachineUpdateOne) Exec(ctx context.Context) error {
	_, err := vmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmuo *VirtualMachineUpdateOne) ExecX(ctx context.Context) {
	if err := vmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vmuo *VirtualMachineUpdateOne) defaults() {
	if _, ok := vmuo.mutation.UpdatedAt(); !ok {
		v := virtualmachine.UpdateDefaultUpdatedAt()
		vmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vmuo *VirtualMachineUpdateOne) check() error {
	if v, ok := vmuo.mutation.Name(); ok {
		if err := virtualmachine.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "VirtualMachine.name": %w`, err)}
		}
	}
	if _, ok := vmuo.mutation.VirtualMachineCPUConfigID(); vmuo.mutation.VirtualMachineCPUConfigCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "VirtualMachine.virtual_machine_cpu_config"`)
	}
	if _, ok := vmuo.mutation.VirtualMachineMemoryConfigID(); vmuo.mutation.VirtualMachineMemoryConfigCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "VirtualMachine.virtual_machine_memory_config"`)
	}
	return nil
}

func (vmuo *VirtualMachineUpdateOne) sqlSave(ctx context.Context) (_node *VirtualMachine, err error) {
	if err := vmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(virtualmachine.Table, virtualmachine.Columns, sqlgraph.NewFieldSpec(virtualmachine.FieldID, field.TypeString))
	id, ok := vmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "VirtualMachine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, virtualmachine.FieldID)
		for _, f := range fields {
			if !virtualmachine.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != virtualmachine.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(virtualmachine.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vmuo.mutation.Name(); ok {
		_spec.SetField(virtualmachine.FieldName, field.TypeString, value)
	}
	if value, ok := vmuo.mutation.Userdata(); ok {
		_spec.SetField(virtualmachine.FieldUserdata, field.TypeString, value)
	}
	if vmuo.mutation.UserdataCleared() {
		_spec.ClearField(virtualmachine.FieldUserdata, field.TypeString)
	}
	_node = &VirtualMachine{config: vmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{virtualmachine.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vmuo.mutation.done = true
	return _node, nil
}
