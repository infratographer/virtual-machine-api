// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package virtualmachinememoryconfig

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the virtualmachinememoryconfig type in the database.
	Label = "virtual_machine_memory_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// EdgeVirtualMachine holds the string denoting the virtual_machine edge name in mutations.
	EdgeVirtualMachine = "virtual_machine"
	// Table holds the table name of the virtualmachinememoryconfig in the database.
	Table = "virtual_machine_memory_configs"
	// VirtualMachineTable is the table that holds the virtual_machine relation/edge.
	VirtualMachineTable = "virtual_machines"
	// VirtualMachineInverseTable is the table name for the VirtualMachine entity.
	// It exists in this package in order to avoid circular dependency with the "virtualmachine" package.
	VirtualMachineInverseTable = "virtual_machines"
	// VirtualMachineColumn is the table column denoting the virtual_machine relation/edge.
	VirtualMachineColumn = "vm_memory_config_id"
)

// Columns holds all SQL columns for virtualmachinememoryconfig fields.
var Columns = []string{
	FieldID,
	FieldSize,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSize holds the default value on creation for the "size" field.
	DefaultSize int
	// SizeValidator is a validator for the "size" field. It is called by the builders before save.
	SizeValidator func(int) error
)

// OrderOption defines the ordering options for the VirtualMachineMemoryConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByVirtualMachineField orders the results by virtual_machine field.
func ByVirtualMachineField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVirtualMachineStep(), sql.OrderByField(field, opts...))
	}
}
func newVirtualMachineStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VirtualMachineInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, VirtualMachineTable, VirtualMachineColumn),
	)
}
