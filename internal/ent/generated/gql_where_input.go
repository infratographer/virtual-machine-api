// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"errors"
	"fmt"
	"time"

	"go.infratographer.com/virtual-machine-api/internal/ent/generated/predicate"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachine"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachinecpuconfig"
	"go.infratographer.com/x/gidx"
)

// VirtualMachineWhereInput represents a where input for filtering VirtualMachine queries.
type VirtualMachineWhereInput struct {
	Predicates []predicate.VirtualMachine  `json:"-"`
	Not        *VirtualMachineWhereInput   `json:"not,omitempty"`
	Or         []*VirtualMachineWhereInput `json:"or,omitempty"`
	And        []*VirtualMachineWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNEQ   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGT    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGTE   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLT    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLTE   *gidx.PrefixedID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "vm_cpu_config_id" field predicates.
	VMCPUConfigID             *gidx.PrefixedID  `json:"vmCPUConfigID,omitempty"`
	VMCPUConfigIDNEQ          *gidx.PrefixedID  `json:"vmCPUConfigIDNEQ,omitempty"`
	VMCPUConfigIDIn           []gidx.PrefixedID `json:"vmCPUConfigIDIn,omitempty"`
	VMCPUConfigIDNotIn        []gidx.PrefixedID `json:"vmCPUConfigIDNotIn,omitempty"`
	VMCPUConfigIDGT           *gidx.PrefixedID  `json:"vmCPUConfigIDGT,omitempty"`
	VMCPUConfigIDGTE          *gidx.PrefixedID  `json:"vmCPUConfigIDGTE,omitempty"`
	VMCPUConfigIDLT           *gidx.PrefixedID  `json:"vmCPUConfigIDLT,omitempty"`
	VMCPUConfigIDLTE          *gidx.PrefixedID  `json:"vmCPUConfigIDLTE,omitempty"`
	VMCPUConfigIDContains     *gidx.PrefixedID  `json:"vmCPUConfigIDContains,omitempty"`
	VMCPUConfigIDHasPrefix    *gidx.PrefixedID  `json:"vmCPUConfigIDHasPrefix,omitempty"`
	VMCPUConfigIDHasSuffix    *gidx.PrefixedID  `json:"vmCPUConfigIDHasSuffix,omitempty"`
	VMCPUConfigIDEqualFold    *gidx.PrefixedID  `json:"vmCPUConfigIDEqualFold,omitempty"`
	VMCPUConfigIDContainsFold *gidx.PrefixedID  `json:"vmCPUConfigIDContainsFold,omitempty"`

	// "virtual_machine_cpu_config" edge predicates.
	HasVirtualMachineCPUConfig     *bool                                `json:"hasVirtualMachineCPUConfig,omitempty"`
	HasVirtualMachineCPUConfigWith []*VirtualMachineCPUConfigWhereInput `json:"hasVirtualMachineCPUConfigWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *VirtualMachineWhereInput) AddPredicates(predicates ...predicate.VirtualMachine) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the VirtualMachineWhereInput filter on the VirtualMachineQuery builder.
func (i *VirtualMachineWhereInput) Filter(q *VirtualMachineQuery) (*VirtualMachineQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyVirtualMachineWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyVirtualMachineWhereInput is returned in case the VirtualMachineWhereInput is empty.
var ErrEmptyVirtualMachineWhereInput = errors.New("generated: empty predicate VirtualMachineWhereInput")

// P returns a predicate for filtering virtualmachines.
// An error is returned if the input is empty or invalid.
func (i *VirtualMachineWhereInput) P() (predicate.VirtualMachine, error) {
	var predicates []predicate.VirtualMachine
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, virtualmachine.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.VirtualMachine, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, virtualmachine.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.VirtualMachine, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, virtualmachine.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, virtualmachine.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, virtualmachine.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, virtualmachine.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, virtualmachine.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, virtualmachine.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, virtualmachine.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, virtualmachine.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, virtualmachine.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, virtualmachine.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, virtualmachine.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, virtualmachine.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, virtualmachine.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, virtualmachine.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, virtualmachine.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, virtualmachine.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, virtualmachine.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, virtualmachine.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, virtualmachine.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, virtualmachine.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, virtualmachine.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, virtualmachine.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, virtualmachine.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, virtualmachine.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, virtualmachine.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, virtualmachine.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, virtualmachine.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, virtualmachine.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, virtualmachine.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, virtualmachine.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, virtualmachine.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, virtualmachine.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, virtualmachine.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, virtualmachine.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, virtualmachine.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, virtualmachine.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, virtualmachine.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, virtualmachine.NameContainsFold(*i.NameContainsFold))
	}
	if i.VMCPUConfigID != nil {
		predicates = append(predicates, virtualmachine.VMCPUConfigIDEQ(*i.VMCPUConfigID))
	}
	if i.VMCPUConfigIDNEQ != nil {
		predicates = append(predicates, virtualmachine.VMCPUConfigIDNEQ(*i.VMCPUConfigIDNEQ))
	}
	if len(i.VMCPUConfigIDIn) > 0 {
		predicates = append(predicates, virtualmachine.VMCPUConfigIDIn(i.VMCPUConfigIDIn...))
	}
	if len(i.VMCPUConfigIDNotIn) > 0 {
		predicates = append(predicates, virtualmachine.VMCPUConfigIDNotIn(i.VMCPUConfigIDNotIn...))
	}
	if i.VMCPUConfigIDGT != nil {
		predicates = append(predicates, virtualmachine.VMCPUConfigIDGT(*i.VMCPUConfigIDGT))
	}
	if i.VMCPUConfigIDGTE != nil {
		predicates = append(predicates, virtualmachine.VMCPUConfigIDGTE(*i.VMCPUConfigIDGTE))
	}
	if i.VMCPUConfigIDLT != nil {
		predicates = append(predicates, virtualmachine.VMCPUConfigIDLT(*i.VMCPUConfigIDLT))
	}
	if i.VMCPUConfigIDLTE != nil {
		predicates = append(predicates, virtualmachine.VMCPUConfigIDLTE(*i.VMCPUConfigIDLTE))
	}
	if i.VMCPUConfigIDContains != nil {
		predicates = append(predicates, virtualmachine.VMCPUConfigIDContains(*i.VMCPUConfigIDContains))
	}
	if i.VMCPUConfigIDHasPrefix != nil {
		predicates = append(predicates, virtualmachine.VMCPUConfigIDHasPrefix(*i.VMCPUConfigIDHasPrefix))
	}
	if i.VMCPUConfigIDHasSuffix != nil {
		predicates = append(predicates, virtualmachine.VMCPUConfigIDHasSuffix(*i.VMCPUConfigIDHasSuffix))
	}
	if i.VMCPUConfigIDEqualFold != nil {
		predicates = append(predicates, virtualmachine.VMCPUConfigIDEqualFold(*i.VMCPUConfigIDEqualFold))
	}
	if i.VMCPUConfigIDContainsFold != nil {
		predicates = append(predicates, virtualmachine.VMCPUConfigIDContainsFold(*i.VMCPUConfigIDContainsFold))
	}

	if i.HasVirtualMachineCPUConfig != nil {
		p := virtualmachine.HasVirtualMachineCPUConfig()
		if !*i.HasVirtualMachineCPUConfig {
			p = virtualmachine.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasVirtualMachineCPUConfigWith) > 0 {
		with := make([]predicate.VirtualMachineCPUConfig, 0, len(i.HasVirtualMachineCPUConfigWith))
		for _, w := range i.HasVirtualMachineCPUConfigWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasVirtualMachineCPUConfigWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, virtualmachine.HasVirtualMachineCPUConfigWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyVirtualMachineWhereInput
	case 1:
		return predicates[0], nil
	default:
		return virtualmachine.And(predicates...), nil
	}
}

// VirtualMachineCPUConfigWhereInput represents a where input for filtering VirtualMachineCPUConfig queries.
type VirtualMachineCPUConfigWhereInput struct {
	Predicates []predicate.VirtualMachineCPUConfig  `json:"-"`
	Not        *VirtualMachineCPUConfigWhereInput   `json:"not,omitempty"`
	Or         []*VirtualMachineCPUConfigWhereInput `json:"or,omitempty"`
	And        []*VirtualMachineCPUConfigWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *gidx.PrefixedID  `json:"id,omitempty"`
	IDNEQ   *gidx.PrefixedID  `json:"idNEQ,omitempty"`
	IDIn    []gidx.PrefixedID `json:"idIn,omitempty"`
	IDNotIn []gidx.PrefixedID `json:"idNotIn,omitempty"`
	IDGT    *gidx.PrefixedID  `json:"idGT,omitempty"`
	IDGTE   *gidx.PrefixedID  `json:"idGTE,omitempty"`
	IDLT    *gidx.PrefixedID  `json:"idLT,omitempty"`
	IDLTE   *gidx.PrefixedID  `json:"idLTE,omitempty"`

	// "cores" field predicates.
	Cores      *int  `json:"cores,omitempty"`
	CoresNEQ   *int  `json:"coresNEQ,omitempty"`
	CoresIn    []int `json:"coresIn,omitempty"`
	CoresNotIn []int `json:"coresNotIn,omitempty"`
	CoresGT    *int  `json:"coresGT,omitempty"`
	CoresGTE   *int  `json:"coresGTE,omitempty"`
	CoresLT    *int  `json:"coresLT,omitempty"`
	CoresLTE   *int  `json:"coresLTE,omitempty"`

	// "sockets" field predicates.
	Sockets      *int  `json:"sockets,omitempty"`
	SocketsNEQ   *int  `json:"socketsNEQ,omitempty"`
	SocketsIn    []int `json:"socketsIn,omitempty"`
	SocketsNotIn []int `json:"socketsNotIn,omitempty"`
	SocketsGT    *int  `json:"socketsGT,omitempty"`
	SocketsGTE   *int  `json:"socketsGTE,omitempty"`
	SocketsLT    *int  `json:"socketsLT,omitempty"`
	SocketsLTE   *int  `json:"socketsLTE,omitempty"`

	// "virtual_machine" edge predicates.
	HasVirtualMachine     *bool                       `json:"hasVirtualMachine,omitempty"`
	HasVirtualMachineWith []*VirtualMachineWhereInput `json:"hasVirtualMachineWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *VirtualMachineCPUConfigWhereInput) AddPredicates(predicates ...predicate.VirtualMachineCPUConfig) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the VirtualMachineCPUConfigWhereInput filter on the VirtualMachineCPUConfigQuery builder.
func (i *VirtualMachineCPUConfigWhereInput) Filter(q *VirtualMachineCPUConfigQuery) (*VirtualMachineCPUConfigQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyVirtualMachineCPUConfigWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyVirtualMachineCPUConfigWhereInput is returned in case the VirtualMachineCPUConfigWhereInput is empty.
var ErrEmptyVirtualMachineCPUConfigWhereInput = errors.New("generated: empty predicate VirtualMachineCPUConfigWhereInput")

// P returns a predicate for filtering virtualmachinecpuconfigs.
// An error is returned if the input is empty or invalid.
func (i *VirtualMachineCPUConfigWhereInput) P() (predicate.VirtualMachineCPUConfig, error) {
	var predicates []predicate.VirtualMachineCPUConfig
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, virtualmachinecpuconfig.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.VirtualMachineCPUConfig, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, virtualmachinecpuconfig.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.VirtualMachineCPUConfig, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, virtualmachinecpuconfig.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, virtualmachinecpuconfig.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, virtualmachinecpuconfig.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, virtualmachinecpuconfig.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, virtualmachinecpuconfig.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, virtualmachinecpuconfig.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, virtualmachinecpuconfig.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, virtualmachinecpuconfig.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, virtualmachinecpuconfig.IDLTE(*i.IDLTE))
	}
	if i.Cores != nil {
		predicates = append(predicates, virtualmachinecpuconfig.CoresEQ(*i.Cores))
	}
	if i.CoresNEQ != nil {
		predicates = append(predicates, virtualmachinecpuconfig.CoresNEQ(*i.CoresNEQ))
	}
	if len(i.CoresIn) > 0 {
		predicates = append(predicates, virtualmachinecpuconfig.CoresIn(i.CoresIn...))
	}
	if len(i.CoresNotIn) > 0 {
		predicates = append(predicates, virtualmachinecpuconfig.CoresNotIn(i.CoresNotIn...))
	}
	if i.CoresGT != nil {
		predicates = append(predicates, virtualmachinecpuconfig.CoresGT(*i.CoresGT))
	}
	if i.CoresGTE != nil {
		predicates = append(predicates, virtualmachinecpuconfig.CoresGTE(*i.CoresGTE))
	}
	if i.CoresLT != nil {
		predicates = append(predicates, virtualmachinecpuconfig.CoresLT(*i.CoresLT))
	}
	if i.CoresLTE != nil {
		predicates = append(predicates, virtualmachinecpuconfig.CoresLTE(*i.CoresLTE))
	}
	if i.Sockets != nil {
		predicates = append(predicates, virtualmachinecpuconfig.SocketsEQ(*i.Sockets))
	}
	if i.SocketsNEQ != nil {
		predicates = append(predicates, virtualmachinecpuconfig.SocketsNEQ(*i.SocketsNEQ))
	}
	if len(i.SocketsIn) > 0 {
		predicates = append(predicates, virtualmachinecpuconfig.SocketsIn(i.SocketsIn...))
	}
	if len(i.SocketsNotIn) > 0 {
		predicates = append(predicates, virtualmachinecpuconfig.SocketsNotIn(i.SocketsNotIn...))
	}
	if i.SocketsGT != nil {
		predicates = append(predicates, virtualmachinecpuconfig.SocketsGT(*i.SocketsGT))
	}
	if i.SocketsGTE != nil {
		predicates = append(predicates, virtualmachinecpuconfig.SocketsGTE(*i.SocketsGTE))
	}
	if i.SocketsLT != nil {
		predicates = append(predicates, virtualmachinecpuconfig.SocketsLT(*i.SocketsLT))
	}
	if i.SocketsLTE != nil {
		predicates = append(predicates, virtualmachinecpuconfig.SocketsLTE(*i.SocketsLTE))
	}

	if i.HasVirtualMachine != nil {
		p := virtualmachinecpuconfig.HasVirtualMachine()
		if !*i.HasVirtualMachine {
			p = virtualmachinecpuconfig.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasVirtualMachineWith) > 0 {
		with := make([]predicate.VirtualMachine, 0, len(i.HasVirtualMachineWith))
		for _, w := range i.HasVirtualMachineWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasVirtualMachineWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, virtualmachinecpuconfig.HasVirtualMachineWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyVirtualMachineCPUConfigWhereInput
	case 1:
		return predicates[0], nil
	default:
		return virtualmachinecpuconfig.And(predicates...), nil
	}
}
