// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachine"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachinecpuconfig"
	"go.infratographer.com/x/gidx"
)

// VirtualMachineCPUConfig is the model entity for the VirtualMachineCPUConfig schema.
type VirtualMachineCPUConfig struct {
	config `json:"-"`
	// ID of the ent.
	// The ID for the virtual machaine cpu config.
	ID gidx.PrefixedID `json:"id,omitempty"`
	// The number of cores for this virtual machine.
	Cores int `json:"cores,omitempty"`
	// The number of sockets for this virtual machine.
	Sockets int `json:"sockets,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VirtualMachineCPUConfigQuery when eager-loading is set.
	Edges        VirtualMachineCPUConfigEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VirtualMachineCPUConfigEdges holds the relations/edges for other nodes in the graph.
type VirtualMachineCPUConfigEdges struct {
	// VirtualMachine holds the value of the virtual_machine edge.
	VirtualMachine *VirtualMachine `json:"virtual_machine,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// VirtualMachineOrErr returns the VirtualMachine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VirtualMachineCPUConfigEdges) VirtualMachineOrErr() (*VirtualMachine, error) {
	if e.loadedTypes[0] {
		if e.VirtualMachine == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: virtualmachine.Label}
		}
		return e.VirtualMachine, nil
	}
	return nil, &NotLoadedError{edge: "virtual_machine"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VirtualMachineCPUConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case virtualmachinecpuconfig.FieldID:
			values[i] = new(gidx.PrefixedID)
		case virtualmachinecpuconfig.FieldCores, virtualmachinecpuconfig.FieldSockets:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VirtualMachineCPUConfig fields.
func (vmcc *VirtualMachineCPUConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case virtualmachinecpuconfig.FieldID:
			if value, ok := values[i].(*gidx.PrefixedID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				vmcc.ID = *value
			}
		case virtualmachinecpuconfig.FieldCores:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cores", values[i])
			} else if value.Valid {
				vmcc.Cores = int(value.Int64)
			}
		case virtualmachinecpuconfig.FieldSockets:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sockets", values[i])
			} else if value.Valid {
				vmcc.Sockets = int(value.Int64)
			}
		default:
			vmcc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VirtualMachineCPUConfig.
// This includes values selected through modifiers, order, etc.
func (vmcc *VirtualMachineCPUConfig) Value(name string) (ent.Value, error) {
	return vmcc.selectValues.Get(name)
}

// QueryVirtualMachine queries the "virtual_machine" edge of the VirtualMachineCPUConfig entity.
func (vmcc *VirtualMachineCPUConfig) QueryVirtualMachine() *VirtualMachineQuery {
	return NewVirtualMachineCPUConfigClient(vmcc.config).QueryVirtualMachine(vmcc)
}

// Update returns a builder for updating this VirtualMachineCPUConfig.
// Note that you need to call VirtualMachineCPUConfig.Unwrap() before calling this method if this VirtualMachineCPUConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (vmcc *VirtualMachineCPUConfig) Update() *VirtualMachineCPUConfigUpdateOne {
	return NewVirtualMachineCPUConfigClient(vmcc.config).UpdateOne(vmcc)
}

// Unwrap unwraps the VirtualMachineCPUConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vmcc *VirtualMachineCPUConfig) Unwrap() *VirtualMachineCPUConfig {
	_tx, ok := vmcc.config.driver.(*txDriver)
	if !ok {
		panic("generated: VirtualMachineCPUConfig is not a transactional entity")
	}
	vmcc.config.driver = _tx.drv
	return vmcc
}

// String implements the fmt.Stringer.
func (vmcc *VirtualMachineCPUConfig) String() string {
	var builder strings.Builder
	builder.WriteString("VirtualMachineCPUConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vmcc.ID))
	builder.WriteString("cores=")
	builder.WriteString(fmt.Sprintf("%v", vmcc.Cores))
	builder.WriteString(", ")
	builder.WriteString("sockets=")
	builder.WriteString(fmt.Sprintf("%v", vmcc.Sockets))
	builder.WriteByte(')')
	return builder.String()
}

// IsEntity implement fedruntime.Entity
func (vmcc VirtualMachineCPUConfig) IsEntity() {}

// VirtualMachineCPUConfigs is a parsable slice of VirtualMachineCPUConfig.
type VirtualMachineCPUConfigs []*VirtualMachineCPUConfig
