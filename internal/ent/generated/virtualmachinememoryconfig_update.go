// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/predicate"
	"go.infratographer.com/virtual-machine-api/internal/ent/generated/virtualmachinememoryconfig"
)

// VirtualMachineMemoryConfigUpdate is the builder for updating VirtualMachineMemoryConfig entities.
type VirtualMachineMemoryConfigUpdate struct {
	config
	hooks    []Hook
	mutation *VirtualMachineMemoryConfigMutation
}

// Where appends a list predicates to the VirtualMachineMemoryConfigUpdate builder.
func (vmmcu *VirtualMachineMemoryConfigUpdate) Where(ps ...predicate.VirtualMachineMemoryConfig) *VirtualMachineMemoryConfigUpdate {
	vmmcu.mutation.Where(ps...)
	return vmmcu
}

// SetSize sets the "size" field.
func (vmmcu *VirtualMachineMemoryConfigUpdate) SetSize(i int) *VirtualMachineMemoryConfigUpdate {
	vmmcu.mutation.ResetSize()
	vmmcu.mutation.SetSize(i)
	return vmmcu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (vmmcu *VirtualMachineMemoryConfigUpdate) SetNillableSize(i *int) *VirtualMachineMemoryConfigUpdate {
	if i != nil {
		vmmcu.SetSize(*i)
	}
	return vmmcu
}

// AddSize adds i to the "size" field.
func (vmmcu *VirtualMachineMemoryConfigUpdate) AddSize(i int) *VirtualMachineMemoryConfigUpdate {
	vmmcu.mutation.AddSize(i)
	return vmmcu
}

// Mutation returns the VirtualMachineMemoryConfigMutation object of the builder.
func (vmmcu *VirtualMachineMemoryConfigUpdate) Mutation() *VirtualMachineMemoryConfigMutation {
	return vmmcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vmmcu *VirtualMachineMemoryConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vmmcu.sqlSave, vmmcu.mutation, vmmcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmmcu *VirtualMachineMemoryConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := vmmcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vmmcu *VirtualMachineMemoryConfigUpdate) Exec(ctx context.Context) error {
	_, err := vmmcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmmcu *VirtualMachineMemoryConfigUpdate) ExecX(ctx context.Context) {
	if err := vmmcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vmmcu *VirtualMachineMemoryConfigUpdate) check() error {
	if v, ok := vmmcu.mutation.Size(); ok {
		if err := virtualmachinememoryconfig.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`generated: validator failed for field "VirtualMachineMemoryConfig.size": %w`, err)}
		}
	}
	return nil
}

func (vmmcu *VirtualMachineMemoryConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vmmcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(virtualmachinememoryconfig.Table, virtualmachinememoryconfig.Columns, sqlgraph.NewFieldSpec(virtualmachinememoryconfig.FieldID, field.TypeString))
	if ps := vmmcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmmcu.mutation.Size(); ok {
		_spec.SetField(virtualmachinememoryconfig.FieldSize, field.TypeInt, value)
	}
	if value, ok := vmmcu.mutation.AddedSize(); ok {
		_spec.AddField(virtualmachinememoryconfig.FieldSize, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vmmcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{virtualmachinememoryconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vmmcu.mutation.done = true
	return n, nil
}

// VirtualMachineMemoryConfigUpdateOne is the builder for updating a single VirtualMachineMemoryConfig entity.
type VirtualMachineMemoryConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VirtualMachineMemoryConfigMutation
}

// SetSize sets the "size" field.
func (vmmcuo *VirtualMachineMemoryConfigUpdateOne) SetSize(i int) *VirtualMachineMemoryConfigUpdateOne {
	vmmcuo.mutation.ResetSize()
	vmmcuo.mutation.SetSize(i)
	return vmmcuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (vmmcuo *VirtualMachineMemoryConfigUpdateOne) SetNillableSize(i *int) *VirtualMachineMemoryConfigUpdateOne {
	if i != nil {
		vmmcuo.SetSize(*i)
	}
	return vmmcuo
}

// AddSize adds i to the "size" field.
func (vmmcuo *VirtualMachineMemoryConfigUpdateOne) AddSize(i int) *VirtualMachineMemoryConfigUpdateOne {
	vmmcuo.mutation.AddSize(i)
	return vmmcuo
}

// Mutation returns the VirtualMachineMemoryConfigMutation object of the builder.
func (vmmcuo *VirtualMachineMemoryConfigUpdateOne) Mutation() *VirtualMachineMemoryConfigMutation {
	return vmmcuo.mutation
}

// Where appends a list predicates to the VirtualMachineMemoryConfigUpdate builder.
func (vmmcuo *VirtualMachineMemoryConfigUpdateOne) Where(ps ...predicate.VirtualMachineMemoryConfig) *VirtualMachineMemoryConfigUpdateOne {
	vmmcuo.mutation.Where(ps...)
	return vmmcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vmmcuo *VirtualMachineMemoryConfigUpdateOne) Select(field string, fields ...string) *VirtualMachineMemoryConfigUpdateOne {
	vmmcuo.fields = append([]string{field}, fields...)
	return vmmcuo
}

// Save executes the query and returns the updated VirtualMachineMemoryConfig entity.
func (vmmcuo *VirtualMachineMemoryConfigUpdateOne) Save(ctx context.Context) (*VirtualMachineMemoryConfig, error) {
	return withHooks(ctx, vmmcuo.sqlSave, vmmcuo.mutation, vmmcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmmcuo *VirtualMachineMemoryConfigUpdateOne) SaveX(ctx context.Context) *VirtualMachineMemoryConfig {
	node, err := vmmcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vmmcuo *VirtualMachineMemoryConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := vmmcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmmcuo *VirtualMachineMemoryConfigUpdateOne) ExecX(ctx context.Context) {
	if err := vmmcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vmmcuo *VirtualMachineMemoryConfigUpdateOne) check() error {
	if v, ok := vmmcuo.mutation.Size(); ok {
		if err := virtualmachinememoryconfig.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`generated: validator failed for field "VirtualMachineMemoryConfig.size": %w`, err)}
		}
	}
	return nil
}

func (vmmcuo *VirtualMachineMemoryConfigUpdateOne) sqlSave(ctx context.Context) (_node *VirtualMachineMemoryConfig, err error) {
	if err := vmmcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(virtualmachinememoryconfig.Table, virtualmachinememoryconfig.Columns, sqlgraph.NewFieldSpec(virtualmachinememoryconfig.FieldID, field.TypeString))
	id, ok := vmmcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "VirtualMachineMemoryConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vmmcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, virtualmachinememoryconfig.FieldID)
		for _, f := range fields {
			if !virtualmachinememoryconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != virtualmachinememoryconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vmmcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmmcuo.mutation.Size(); ok {
		_spec.SetField(virtualmachinememoryconfig.FieldSize, field.TypeInt, value)
	}
	if value, ok := vmmcuo.mutation.AddedSize(); ok {
		_spec.AddField(virtualmachinememoryconfig.FieldSize, field.TypeInt, value)
	}
	_node = &VirtualMachineMemoryConfig{config: vmmcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vmmcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{virtualmachinememoryconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vmmcuo.mutation.done = true
	return _node, nil
}
